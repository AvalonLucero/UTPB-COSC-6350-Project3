
server
*-import keys dict from Crypto.py
*-listens on port 5555
*-accepts incoming TCP connections
*--for each connection, spawn a thread from a pool
*--keep connection alive until closed by the client
*--server opens text file as bytes
*---get size of file in bytes
---send client file size * 4 as total file size in crumbs
*---decompose the bytes into 2-bit crumbs
*---store the crumbs as a list
--for crumb in list:
---convert crumb to str binary representation
---using str representation, pull the uuid encryption key from the keys dict
---encrypt "some string" under AES using uuid
---send to client as ciphertext
--await notification of percentage of file which was successfully decrypted by the client
--send the file again

client
-import keys dict from Crypto.py
-establish connection with server at localhost:5555
-get total file size in crumbs from server
-create empty crumb list of [size]
-create list of lists of keys already used to attempt to decrypt a given crumb
-create int num_decoded = 0
-await transmission from server for crumb at index 0
--randomly select a key from keys
--use AES to attempt to decrypt the data using the selected key
---if data decrypts to "some string":
----use the entry from keys dict to fill the corresponding index in the crumb list
----num_decoded += 1
---if data fails to decrypt:
----if attempted_keys[i] is None:
-----attempted_keys[i] = []
-----attempted_keys[i].append(crumb)
--repeat for entire list of crumbs
-num_decoded / len(crumbs) is the fraction currently decoded
-transmit current fraction to server
-if frac is significantly below expected, throw error (eavesdropping)
-loop until file is fully downloaded
-convert crumb list back to bytes and store as a file
-close connection with the server